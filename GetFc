#!/bin/bash

###################################################################
#
# Author
AUTH="Ema"
# Version
VERS="0.1"
# Date of the Version
DVER="Jan. 2019"
# List of updates
# v0.1 - Jan 2019
#        Added possibility to include ESO PI and Program ID
#        Zoom in ds9 is now a free parameter
#        Including a box to show the FoV
# v0.0 - Jun 2018
#        This is the inital version of this macro
#
###################################################################

echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "                                                   "
echo " GetFc                                             "
echo "                                                   "
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "                                                   "
echo " Version $VERS written by $AUTH on $DVER           "
echo "                                                   "
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "                                                   "

###########################################
# Help for GetFC                          #
###########################################

display_help() {
    echo "                                                   "
    echo " This is a simple bash script that automatically   "
    echo " creates finding charts from PS1 images.           "
    echo "                                                   "
    echo " GetFC -- Version 0.0 -- EPFarina                  "
    echo "                                                   "
    echo " Options:                                          "
    echo "                                                   "
    echo " -h, --help      You know this                     "
    echo " -i, --infile    File Containing RA and Dec        "
    echo " -f, --filter    Select the filter for the FC      "
    echo " -o, --offset    Select if you need an offset star "
    echo " -m, --magstar   R-band limit magnitude of the     "
    echo "                 offset star                       "
    echo " -e, --eso       Add PI and program information to "
    echo "                 the FCs                           "
    echo " -fs, --fovsize  The code will drow a square box   "
    echo "                 centered on the target with this  "
    echo "                 size [in arcsec]                  "
    echo " -z, --zoom      Parameter to adjust the zoom of   "
    echo "                 ds9 when creating the FC. A value "
    echo "                 around 1. is usually good.        "
    echo "                                                   "
    echo " The file containing RA and Dec should contain 3   "
    echo " columns (ObjectName RA_deg DEC_deg) in the        "
    echo " following format:                                 "
    echo "                                                   "
    echo " ------------------------------------------------- "
    echo " PSO210p09  210.829703543   9.047498139            "
    echo " PSO320m24  320.870330000 -24.360400000            "
    echo "                                                   "
    echo " ------------------------------------------------- "
    echo "                                                   "
    exit 1
}

###########################################
# Define ESO PI details                   #
###########################################
set_pi(){
    PINAME="EPFarina"
    PROGID="XXXX.A-XXX(A)"
    ISESO="true"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo " Setting options for ESO Programs                  "
    read -p " Insert PI Name: " PINAME
    read -p " Insert Program Number: " PROGID
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}

###########################################
# Clean Folder                            #
###########################################
clean_folder() {
    rm -fr ps1filenames*
    rm -fr rings.*
    rm -fr wget-log
    rm -fr radec_stars.txt
    rm -fr _fullNomadCatalogue
    rm -fr _fullNomadCatalogueRaDecRmag
    rm -fr _brightStarsRaObjDecObjRaStarDecStarRmagStar
    rm -fr _brightStarsSeparationRaStarDecStarRmagStar
    rm -fr _brightStarsSortSeparationRaStarDecStarRmagStar
    rm -fr _brightStarsCloseSeparationRaStarDecStarRmagStar
    rm -fr _starPS1RaDecRpsfRapZpsfZap
    rm -fr logfile
    rm -fr offsets.txt
}

###########################################
# Assign defafaul value for the variables #
###########################################

: ${INFILE:="radec.txt"}
: ${FILTER:="z"}
: ${OFFSET:="false"}
: ${MAGSTA:="18.0"}
: ${ISESO:="false"}
: ${ZOOM:="1.0"}
: ${FOV:="120.0"}

###########################################
# Control options                         #
###########################################

while :
do
    case "$1" in
      -i | --infile)
          if [ $# -ne 0 ]; then
            INFILE="$2"
          fi
          shift 2
          ;;
      -f | --filter)
          if [ $# -ne 0 ]; then
            FILTER="$2"
          fi
          shift 2
          ;;
      -m | --magstar)
          if [ $# -ne 0 ]; then
              MAGSTA="$2"
          fi
          shift 2
          ;;
      -o | --offset)
          OFFSET="true"
          shift
          ;;
      -e | --eso)
          set_pi
          shift
          ;;
      -fs | --fovsize)
          if [ $# -ne 0 ]; then
              FOV="$2"
          fi
          shift 2
          ;;
      -z | --zoom)
          if [ $# -ne 0 ]; then
              ZOOM="$2"
          fi
          shift 2
          ;;
      -h | --help)
          display_help
          exit 0
          ;;
     --) # End of all options
          shift
          break
          ;;
      -*)
          echo "                                                   "
          echo "Error: Unknown option: $1                          " >&2
          echo " Options are:                                      "
          echo " -h, --help      Display help                      "
          echo " -i, --infile    File Containing RA and Dec        "
          echo " -f, --filter    Select the filter for the FC      "
          echo " -o, --offset    Select if you need an offset star "
          echo " -m, --magstar   R-band limit magnitude of the star"
          echo " -e, --eso       Add PI and program info to the FC "
          echo " -fs, --fovsize  Specify FoV size in arcseconds    "
          echo " -z, --zoom      Zoom of the ds9 FC                "
          echo "                                                   "
          exit 1 
          ;;
      *)  # No more options
          break
          ;;
    esac
done

echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "                                                   "
echo " Creating finding chart in $FILTER band from the   "
echo " input file $INFILE                                "
echo "                                                   "
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "                                                   "


clean_folder

while read MASTER MASTER_RA MASTER_DEC
    do
        echo "                                                   "
        echo " OBJECT: $MASTER                                   "
        echo "                                                   "
        echo "  - Querying the PS1 archive                       "
        ps1file="ps1filenames.py?ra=$MASTER_RA&dec=$MASTER_DEC"
        rm -fr $ps1file
        wget -q "http://ps1images.stsci.edu/cgi-bin/$ps1file"
        ps1file=$(ls ps1filenames.py?ra=* | sort -V | tail -n 1)
        if [ $(less $ps1file | wc -l) -lt "2" ]; then
            echo "    WARNING! RA and Dec outside the PS1 footprint "
            echo "    The finding chart will be generated from ESO DSS"
            ISPS1="false"
            else
            ISPS1="true"
        fi
        if [ $ISPS1 == "true" ]; then
            while read projcell subcell ra dec filter mjd type filename shortname
                do
                    if [ $filter == $FILTER ]
                    then
                        echo "  - Downloading $FILTER band image                    "
                        wget -q "http://ps1images.stsci.edu/$filename"
                        ps1fits="$MASTER.$filter"
                        mv -f "${filename##*/}" $ps1fits.fits
                    fi
            done < $ps1file
            else
                ps1fits="$MASTER.ESODSS"
        fi
        if [ $OFFSET == "true" ]; then
            echo "  - Querying to the NOMAD archive for offset star     "
            rm -fr $ps1fits.tsv
            if [ $ISPS1 == "true" ]; then
                ds9 -frame delete -frame new "$ps1fits.fits" -catalog nomad -catalog export tsv $ps1fits.tsv -exit
                else
                ds9 -frame delete -frame new -dsseso coord $MASTER_RA $MASTER_DEC -dsseso size 5 5 arcmin -catalog nomad -catalog export tsv $ps1fits.tsv -exit
            fi
            CHECKTSF=0
            while [ $CHECKTSF -lt 1 ]; do
                if [ -f $ps1fits.tsv ]; then
                    CHECKTSF=1
                    echo "    ... Waiting for the catalogue to be written ...    "
                    sleep 2.
                fi
            done
            rm -fr _fullNomadCatalogue
            rm -fr _fullNomadCatalogueRaDecRmag
            rm -fr _brightStarsRaObjDecObjRaStarDecStarRmagStar
            rm -fr _brightStarsSeparationRaStarDecStarRmagStar
            rm -fr _brightStarsSortSeparationRaStarDecStarRmagStar
            rm -fr _brightStarsCloseSeparationRaStarDecStarRmagStar
            rm -fr _starPS1RaDecRpsfRapZpsfZap
            rm -fr _temp?
            tail -n +2 $ps1fits.tsv > _fullNomadCatalogue
            cut -f5-6,16 _fullNomadCatalogue > _fullNomadCatalogueRaDecRmag
            while read RA_nomad DEC_nomad Rmag_nomad; do
                if [[ $Rmag_nomad < $MAGSTA ]] && [[ $Rmag_nomad > 10 ]]; then
                    echo $MASTER_RA $MASTER_DEC $RA_nomad $DEC_nomad $Rmag_nomad >> _brightStarsRaObjDecObjRaStarDecStarRmagStar
                fi
            done < _fullNomadCatalogueRaDecRmag
            awk '{ delta=3600.*((cos(3.14/180.0*$2)*($1-$3))**2+($2-$4)**2.)**0.5; print delta, $3, $4, $5}' _brightStarsRaObjDecObjRaStarDecStarRmagStar >>  _brightStarsSeparationRaStarDecStarRmagStar
            sort -k1 -g  _brightStarsSeparationRaStarDecStarRmagStar > _brightStarsSortSeparationRaStarDecStarRmagStar
            head -5 _brightStarsSortSeparationRaStarDecStarRmagStar > _brightStarsCloseSeparationRaStarDecStarRmagStar
            echo "  - Searching for the best offset star:                  "
            # check condition that the star has ABS(PSF-APE)<0.1
            rm -fr magdiff.txt
            ISSTAR="false"
            while read DISTANCE RA_nomad DEC_nomad Rmag_nomad; do
                if [ $ISPS1 == "true" ]; then
                    echo "    - RA=$RA_nomad Dec=$DEC_nomad                    "
                    echo "      with Rmag=$Rmag_nomad                          "
                    echo "      and separated by $DISTANCE arcsec from the target"
                    echo "      Query the PS1 archive for precise coordinates  "
                    wget -O "$ps1fits.csv" -v -a logfile "https://archive.stsci.edu/panstarrs/search.php?RA=$RA_nomad&DEC=$DEC_nomad&radius=0.02&max_records=1&coordformat=dec&outputformat=CSV&action=Search" 2> /dev/null
                    if [[ $(less "$ps1fits.csv") == *no*rows*found* ]]; then
                        echo "      WARNING! No matching with PS1 archive!        "
                        echo "      Moving to the next star..                     "
                        else
                        cat $ps1fits.csv | cut -d ',' -f3-4,33,37,49,53 > _starPS1RaDecRpsfRapZpsfZap
                        tail -n +3 _starPS1RaDecRpsfRapZpsfZap > _temp7
                        sed -i 's/,/ /g' _temp7
                        awk '{ delta_rmag=sqrt(($3-$4)^2); delta_zmag=sqrt(($5-$6)^2); print delta_rmag}' _temp7 > magdiff.txt
                        DIFF_Rmag=$(cat magdiff.txt)
                        echo "      The PSF_mag - APERTURE_mag in r-band is: $DIFF_Rmag"
                        if (( $(bc <<< "$DIFF_Rmag <= 0.05") )); then
                            tail -n +3 _starPS1RaDecRpsfRapZpsfZap >> radec_stars.txt
                            sed -i 's/,/ /g' radec_stars.txt
                            echo "  - Creating FC                                    "
                            # Compass position
                            COMPASS_RA=$(echo "$MASTER_RA - (0.015/c(3.14/180.0*$MASTER_DEC))" | bc -l)
                            COMPASS_DEC=$(echo "$MASTER_DEC - 0.01" | bc -l)
                            # Scale-bar position
                            SCALE_RA=$(echo "$MASTER_RA + (0.015/c(3.14/180.0*$MASTER_DEC))" | bc -l)
                            SCALE_DEC=$(echo "$MASTER_DEC - 0.01" | bc -l)
                            echo "# Region file format: DS9 version 4.1" > $ps1fits.reg
                            echo "global color=green dashlist=8 3 width=1 font=\"helvetica 18 bold roman\" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1" >> $ps1fits.reg
                            echo "fk5"  >> $ps1fits.reg
                            echo "circle($MASTER_RA,$MASTER_DEC,3\") # color=red width=4 text={$MASTER}"  >> $ps1fits.reg
                            echo "circle($RA_nomad,$DEC_nomad,3\") # color=blue width=4 text={R = $Rmag_nomad mag}" >> $ps1fits.reg
                            echo "box($MASTER_RA,$MASTER_DEC,$FOV\",$FOV\",0.0) # color=black width=4 text={$FOV\"x$FOV\"} dash=1" >> $ps1fits.reg
                            if [ $ISESO == true ]; then
                                # PI name position
                                PI_RA=$(echo "$MASTER_RA - (0.009/c(3.14/180.0*$MASTER_DEC))" | bc -l)   # ToDo: this should be related to the size of the FC in "
                                PI_DEC=$(echo "$MASTER_DEC + 0.010" | bc -l)                             # ToDo: this should be related to the size of the FC in "
                                # programme ID position
                                ID_RA=$(echo "$MASTER_RA - (0.009/c(3.14/180.0*$MASTER_DEC))" | bc -l)   # ToDo: this should be related to the size of the FC in "
                                ID_DEC=$(echo "$MASTER_DEC + 0.0085" | bc -l)                            # ToDo: this should be related to the size of the FC in "
                                # FC band position
                                BAND_RA=$(echo "$MASTER_RA + (0.010/c(3.14/180.0*$MASTER_DEC))" | bc -l) # ToDo: this should be related to the size of the FC in "
                                BAND_DEC=$(echo "$MASTER_DEC + 0.010" | bc -l)                           # ToDo: this should be related to the size of the FC in "
                                echo "# text($PI_RA,$PI_DEC) textangle=0.0 color=red width=4 text={PI: $PINAME}" >> $ps1fits.reg
                                echo "# text($ID_RA,$ID_DEC) textangle=0.0 color=red width=4 text={$PROGID}" >> $ps1fits.reg
                                echo "# text($BAND_RA,$BAND_DEC) textangle=0.0 color=black width=4 text={$FILTER band}" >> $ps1fits.reg
                            fi
                            echo "# vector($SCALE_RA,$SCALE_DEC,30\",0) vector=0 color=black width=4 text={30\"}" >> $ps1fits.reg
                            echo "# compass($COMPASS_RA,$COMPASS_DEC,15\") compass=fk5 {N} {E} 1 1 color=black width=4" >> $ps1fits.reg
                            echo "  - Saving FC                                      "
                            ds9 -frame delete -frame new "$ps1fits.fits" -scale limits -1. 5. -scale zscale -cmap invert yes -pan to $MASTER_RA $MASTER_DEC wcs fk5 -region load all "$ps1fits.reg" -geometry 800x900 -zoom $ZOOM -colorbar no -saveimage "$ps1fits.jpeg" 100 -exit
                            echo "  - Calculating offset                               "
                            while read RA_star DEC_star R_star Z_star; do
                                echo $MASTER_RA $MASTER_DEC $RA_star $DEC_star > _temp9
                            done < _temp7
                            if [[ $MASTER_DEC < $DEC_nomad ]]; then
                                awk '{ delta_RA=3600.*cos(3.14/180.0*$2)*($1-$3); delta_Dec=3600.*($2-$4); PA=180.*atan2((($1-$3)*cos(3.14/180.0*$2)),($2-$4))/3.14; print $1, $2, $3, $4, delta_RA, delta_Dec, PA}' _temp9 >> offsets.txt
                            else
                                awk '{ delta_RA=3600.*cos(3.14/180.0*$4)*($1-$3); delta_Dec=3600.*($2-$4); PA=180.*atan2((($1-$3)*cos(3.14/180.0*$4)),($2-$4))/3.14; print $1, $2, $3, $4, delta_RA, delta_Dec, PA}' _temp9 >> offsets.txt
                            fi
                            ISSTAR="true"
                            break
                        fi
                    fi
                fi
                rm -fr $ps1fits.tsv
                rm -fr $ps1fits.csv
            done < _brightStarsCloseSeparationRaStarDecStarRmagStar
            if [ $ISSTAR == "false" ]; then
                echo "    WARNING! No star matching in PS1!"
                echo "    Using NOMAD coordinates. These may not be accurate"
                while read DISTANCE RA_nomad DEC_nomad Rmag_nomad; do
                    echo "    RA=$RA_nomad Dec=$DEC_nomad   "
                    echo "    with Rmag=$Rmag_nomad       "
                    echo "    and separated by $DISTANCE arcsec from the target"
                    echo "  - Creating FC    "
                    # Compass position
                    COMPASS_RA=$(echo "$MASTER_RA - (0.015/c(3.14/180.0*$MASTER_DEC))" | bc -l)
                    COMPASS_DEC=$(echo "$MASTER_DEC - 0.01" | bc -l)
                    # Scale-bar position
                    SCALE_RA=$(echo "$MASTER_RA + (0.015/c(3.14/180.0*$MASTER_DEC))" | bc -l)
                    SCALE_DEC=$(echo "$MASTER_DEC - 0.01" | bc -l)
                    echo "# Region file format: DS9 version 4.1" > $ps1fits.reg
                    echo "global color=green dashlist=8 3 width=1 font=\"helvetica 18 bold roman\" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1" >> $ps1fits.reg
                    echo "fk5"  >> $ps1fits.reg
                    echo "circle($MASTER_RA,$MASTER_DEC,3\") # color=red width=4 text={$MASTER}"  >> $ps1fits.reg
                    echo "circle($RA_nomad,$DEC_nomad,3\") # color=blue width=4 text={R = $Rmag_nomad mag}" >> $ps1fits.reg
                    echo "box($MASTER_RA,$MASTER_DEC,$FOV\",$FOV\",0.0) # color=black width=4 text={$FOV\"x$FOV\"} dash=1" >> $ps1fits.reg
                    if [ $ISESO == true ]; then
                        # PI name position
                        PI_RA=$(echo "$MASTER_RA - (0.009/c(3.14/180.0*$MASTER_DEC))" | bc -l)   # ToDo: this should be related to the size of the FC in "
                        PI_DEC=$(echo "$MASTER_DEC + 0.010" | bc -l)   # ToDo: this should be related to the size of the FC in "
                        # programme ID position
                        ID_RA=$(echo "$MASTER_RA - (0.009/c(3.14/180.0*$MASTER_DEC))" | bc -l)   # ToDo: this should be related to the size of the FC in "
                        ID_DEC=$(echo "$MASTER_DEC + 0.0085" | bc -l)  # ToDo: this should be related to the size of the FC in "
                        # FC band position
                        BAND_RA=$(echo "$MASTER_RA + (0.010/c(3.14/180.0*$MASTER_DEC))" | bc -l) # ToDo: this should be related to the size of the FC in "
                        BAND_DEC=$(echo "$MASTER_DEC + 0.010" | bc -l)  # ToDo: this should be related to the size of the FC in "
                        echo "# text($PI_RA,$PI_DEC) textangle=0.0 color=red width=4 text={PI: $PINAME}" >> $ps1fits.reg
                        echo "# text($ID_RA,$ID_DEC) textangle=0.0 color=red width=4 text={$PROGID}" >> $ps1fits.reg
                        echo "# text($BAND_RA,$BAND_DEC) textangle=0.0 color=black width=4 text={$FILTER band}" >> $ps1fits.reg
                    fi
                    echo "# vector($SCALE_RA,$SCALE_DEC,30\",0) vector=0 color=black width=4 text={30\"}" >> $ps1fits.reg
                    echo "# compass($COMPASS_RA,$COMPASS_DEC,15\") compass=fk5 {N} {E} 1 1 color=black width=4" >> $ps1fits.reg
                    echo "  - Saving FC 				     "
                    if [ $ISPS1 == "true" ]; then
                        ds9 -frame delete -frame new "$ps1fits.fits" -scale limits -1. 5. -scale zscale -cmap invert yes -pan to $MASTER_RA $MASTER_DEC wcs fk5 -region load all "$ps1fits.reg" -geometry 800x900 -zoom $ZOOM -colorbar no -saveimage "$ps1fits.jpeg" 100 -exit
                    else
                        ds9 -frame delete -frame new -dsseso coord $MASTER_RA $MASTER_DEC  -dsseso size $FOV $FOV arcmin -scale limits -1. 5. -scale zscale -cmap invert yes  -pan to $MASTER_RA $MASTER_DEC wcs fk5 -region load all "$ps1fits.reg" -geometry 800x900 -zoom 5 -colorbar no -saveimage "$ps1fits.jpeg" 100 -exit
                    fi
                    echo "  - Calculating offset"
                    echo $MASTER_RA $MASTER_DEC $RA_nomad $DEC_nomad > _temp9
                    if [[ $MASTER_DEC < $DEC_nomad ]]
                        then
                            awk '{ delta_RA=3600.*cos(3.14/180.0*$2)*($1-$3); delta_Dec=3600.*($2-$4); PA=180.*atan2((($1-$3)*cos(3.14/180.0*$2)),($2-$4))/3.14; print $1, $2, $3, $4, delta_RA, delta_Dec, PA}' _temp9 >> offsets.txt
                        else
                            awk '{ delta_RA=3600.*cos(3.14/180.0*$4)*($1-$3); delta_Dec=3600.*($2-$4); PA=180.*atan2((($1-$3)*cos(3.14/180.0*$4)),($2-$4))/3.14; print $1, $2, $3, $4, delta_RA, delta_Dec, PA}' _temp9 >> offsets.txt
                    fi
                    ISSTAR="true"
                    break
                done < _brightStarsCloseSeparationRaStarDecStarRmagStar
            fi
        else
            echo "  - Creating FC                                    "
            # Compass position
            COMPASS_RA=$(echo "$MASTER_RA - (0.015/c(3.14/180.0*$MASTER_DEC))" | bc -l)
            COMPASS_DEC=$(echo "$MASTER_DEC - 0.01" | bc -l)
            # Scale-bar position
            SCALE_RA=$(echo "$MASTER_RA + (0.015/c(3.14/180.0*$MASTER_DEC))" | bc -l)
            SCALE_DEC=$(echo "$MASTER_DEC - 0.01" | bc -l)
            echo "# Region file format: DS9 version 4.1" > $ps1fits.reg
            echo "global color=green dashlist=8 3 width=1 font=\"helvetica 18 bold roman\" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1" >> $ps1fits.reg
            echo "fk5"  >> $ps1fits.reg
            echo "circle($MASTER_RA,$MASTER_DEC,3\") # color=red width=4 text={$MASTER}"  >> $ps1fits.reg
            echo "box($MASTER_RA,$MASTER_DEC,$FOV\",$FOV\",0.0) # color=black width=4 text={$FOV\"x$FOV\"} dash=1" >> $ps1fits.reg
            if [ $ISESO == true ]; then
                # PI name position
                PI_RA=$(echo "$MASTER_RA - (0.009/c(3.14/180.0*$MASTER_DEC))" | bc -l)   # ToDo: this should be related to the size of the FC in "
                PI_DEC=$(echo "$MASTER_DEC + 0.010" | bc -l)                             # ToDo: this should be related to the size of the FC in "
                # programme ID position
                ID_RA=$(echo "$MASTER_RA - (0.009/c(3.14/180.0*$MASTER_DEC))" | bc -l)   # ToDo: this should be related to the size of the FC in "
                ID_DEC=$(echo "$MASTER_DEC + 0.0085" | bc -l)                            # ToDo: this should be related to the size of the FC in "
                # FC band position
                BAND_RA=$(echo "$MASTER_RA + (0.010/c(3.14/180.0*$MASTER_DEC))" | bc -l) # ToDo: this should be related to the size of the FC in "
                BAND_DEC=$(echo "$MASTER_DEC + 0.010" | bc -l)                           # ToDo: this should be related to the size of the FC in "
                echo "# text($PI_RA,$PI_DEC) textangle=0.0 color=red width=4 text={PI: $PINAME}" >> $ps1fits.reg
                echo "# text($ID_RA,$ID_DEC) textangle=0.0 color=red width=4 text={$PROGID}" >> $ps1fits.reg
                echo "# text($BAND_RA,$BAND_DEC) textangle=0.0 color=black width=4 text={$FILTER band}" >> $ps1fits.reg
            fi
            echo "# vector($SCALE_RA,$SCALE_DEC,30\",0) vector=0 color=black width=4 text={30\"}" >> $ps1fits.reg
            echo "# compass($COMPASS_RA,$COMPASS_DEC,15\") compass=fk5 {N} {E} 1 1 color=black width=4" >> $ps1fits.reg
            echo "  - Saving FC                                      "
            if [ $ISPS1 == "true" ]; then
                ds9 -frame delete -frame new "$ps1fits.fits" -scale limits -1. 5. -scale zscale -cmap invert yes -pan to $MASTER_RA $MASTER_DEC wcs fk5 -region load all "$ps1fits.reg" -geometry 800x900 -zoom $ZOOM -colorbar no -saveimage "$ps1fits.jpeg" 100 -exit
                else
                ds9 -frame delete -frame new -dsseso coord $MASTER_RA $MASTER_DEC  -dsseso size $FOV $FOV arcmin -scale limits -1. 5. -scale zscale -cmap invert yes  -pan to $MASTER_RA $MASTER_DEC wcs fk5 -region load all "$ps1fits.reg" -geometry 800x900 -zoom 5 -colorbar no -saveimage "$ps1fits.jpeg" 100 -exit
            fi
        fi
        rm -fr _fullNomadCatalogue
        rm -fr _fullNomadCatalogueRaDecRmag
        rm -fr _brightStarsRaObjDecObjRaStarDecStarRmagStar
        rm -fr _brightStarsSeparationRaStarDecStarRmagStar
        rm -fr _brightStarsSortSeparationRaStarDecStarRmagStar
        rm -fr _brightStarsCloseSeparationRaStarDecStarRmagStar
        rm -fr _starPS1RaDecRpsfRapZpsfZap
        rm -fr _temp?
        rm -fr logfile
        rm -fr magdiff.txt
        rm -fr ps1filenames*
        echo "                                                   "
done < $INFILE

if [ $OFFSET == "1" ]
    then
        rm -fr OffsetStar.txt
        echo "#            TARGET        RA_TARGET      DEC_TARGET         RA_STAR        DEC_STAR rPS1_STAR   DELTA_RA  DELTA_DEC         PA" >> OffsetStar.txt
        echo "#                              [deg]           [deg]           [deg]           [deg]     [mag]   [arcsec]   [arcsec]      [deg]" >> OffsetStar.txt
        awk '{print $1}' ./$INFILE > .file_col1
        awk '{print $2}' ./$INFILE > .file_col2
        awk '{print $3}' ./$INFILE > .file_col3
        awk '{print $1}' ./radec_stars.txt > .file_col4
        awk '{print $2}' ./radec_stars.txt > .file_col5
        awk '{print $3}' ./radec_stars.txt > .file_col6
        awk '{print $5}' ./offsets.txt > .file_col7
        awk '{print $6}' ./offsets.txt > .file_col8
        awk '{print $7}' ./offsets.txt > .file_col9

        readarray -t column1 < .file_col1
        readarray -t column2 < .file_col2
        readarray -t column3 < .file_col3
        readarray -t column4 < .file_col4
        readarray -t column5 < .file_col5
        readarray -t column6 < .file_col6
        readarray -t column7 < .file_col7
        readarray -t column8 < .file_col8
        readarray -t column9 < .file_col9


        RA_STA=( $(awk '{print $1}' ./radec_stars.txt) )
        DE_STA=( $(awk '{print $2}' ./radec_stars.txt) )
        i=0;
        for (( i=0; i<${#column1[@]}; i++ )); do
                # echo -e "${column1[$i]} ${column2[$i]} ${column3[$i]}"
                printf "%20s %15s %15s %15s %15s %9s %10s %10s %10s\n" "${column1[$i]}" "${column2[$i]}" "${column3[$i]}" "${column4[$i]}" "${column5[$i]}" "${column6[$i]}" "${column7[$i]}" "${column8[$i]}" "${column9[$i]}" >> OffsetStar.txt 
        done
fi
rm -fr .file_col?
rm -fr offsets.txt
rm -fr radec_stars.txt
